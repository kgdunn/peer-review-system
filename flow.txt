TO DO
======

Figure out template footer/header
Convert submissions to PDFs
Create Rubric data structure and display it in the browser
Use foreign characters in the text
Set nice columns in AdminDB to display details


Turn DEBUG off

# Handle the case when a Person suddenly switches role:
# We don't expect that, and want to prevent POST hijacking.



First time
===========
* Get the POST details
* Create the learner account, filling in Person instance: name and email
* Redirect learner to their unique ID site


* Get the course PR item (resource_link_title) and retrieve the PR_process
  based on the ``LTI_title``.
* Add the learners in an intersection datatable: Course * Person * Group

Submission steps:
* If the submission time is prior to the deadline, allow a new submission
* Indicate if prior submissions are found (dimmer colour)
* If past deadline: indicate that a new submisison cannot be allowed
* Once submitted, send an email with confirmation to group/learner
  -> should indicate when to return to start with the review process.


* Update datastructure on the group addition?

Review process
==============

New user: create user in this course
Show the next reviews to complete
Set up the rubric when the review is actually started

{{item.submission.file_upload.url}}

New user:
* done: Find the PR
* done: Find the submission
* done: Get the RubricTemplate
* done: Make a RubricActual
* done: Save
* done: Create 1+ RItemActuals
* done: Save each one


presented with the next available review
click to expand and start
shown the document and the rubric side by side
in a responsive way that the rubric goes below the document
rubric answers are saved as entered in realtime
resume /save as draft/submit

Cannot edit/resubmit after submission date

"""
I need a way to allocate reviews to a learner.
* once allocated, it is remembered (state). So when they come back they see the
  same N = 3 reviews, in the same order, waiting for them.

  class Review:
       * source = Submission
       * reviewer = Person
       * allocated_datetime
       * order = 1, 2, 3, 4, ...?
       *

* The review is allocated out of the pool of all submissions.is_valid and take
  the next available review that:
    * is not from the same group as the reviewer
    * has not already been seen by the reviewer
    * that has the lowest number of allocations so far



"""
