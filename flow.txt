TO DO
======

Replicate the infrastructore on Webfaction
After cut-off time show calculation of their grades
Get the HTML formating of the criterion text to look good.
Verify that the text is the same
Provide overall feedback box for students to fill in. If you struggle with interpretation
then ....

"Waste equals Food" or "Waste is Designed out" (3 points)" -> Waste equals Food" or "Waste is Designed out" (max: 3/3 points)
Alternating colours | radio buttons aligned and indented in rubric
Process results of evaluations to display back to students

Show review as being completed in the browser
Distinction in instructor vs student view: show names, current allocations
Convert submissions to PDFs


Before the run:
----
Reduce memory for yint
Reduce memory for rsmopt

During the run:
----
Track linode stats
Run htop



Review process
==============

New user: create user in this course
Show the next reviews to complete
Set up the rubric when the review is actually started

New user:
* done: Find the PR
* done: Find the submission
* done: Get the RubricTemplate
* done: Make a RubricActual
* done: Save
* done: Create 1+ RItemActuals
* done: Save each one


presented with the next available review
click to expand and start
shown the document and the rubric side by side
in a responsive way that the rubric goes below the document
rubric answers are saved as entered in realtime
resume /save as draft/submit

Cannot edit/resubmit after submission date


If the page is reloaded, it shows the options from last time



"""
I need a way to allocate reviews to a learner.
* once allocated, it is remembered (state). So when they come back they see the
  same N = 3 reviews, in the same order, waiting for them.

  class Review:
       * source = Submission
       * reviewer = Person
       * allocated_datetime
       * order = 1, 2, 3, 4, ...?
       *

* The review is allocated out of the pool of all submissions.is_valid and take
  the next available review that:
    * is not from the same group as the reviewer
    * has not already been seen by the reviewer
    * that has the lowest number of allocations so far

* Handle self-review still


"""
